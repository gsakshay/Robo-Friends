{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","redux/actions.js","registerServiceWorker.js","redux/rootReducer.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","value","Scroll","props","style","overflow","border","height","children","App","toggleOpen","setState","open","state","addRobot","newName","newEmail","alert","newUser","uuidv4","this","fetchRobots","filteredRobots","filter","robot","toLowerCase","includes","isLoading","textAlign","Modal","onClose","event","target","Button","variant","color","onClick","onSearchChange","fontFamily","Component","connect","searchField","dispatch","payload","fetch","then","response","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","error","initialState","logger","createLogger","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.64bd0ee1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n        value={searchfield}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n\r\n//","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Modal from '@material-ui/core/Modal';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { connect } from \"react-redux\";\r\nimport { searchChange,addRobot,fetchRobots } from \"../redux/actions\";\r\n\r\nconst mapStatesToProps = state => {\r\n  return{\r\n    searchfield:state.searchField,\r\n    robots:state.robots,\r\n    isLoading:state.isLoading,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n  onSearchChange:(event)=>{dispatch(searchChange(event.target.value))},  \r\n  addRobot:(user)=>{dispatch(addRobot(user))},\r\n  fetchRobots:()=>{dispatch(fetchRobots())},\r\n  }\r\n}\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      open:false,\r\n      newName:\"\",\r\n      newEmail: \"\"\r\n    }\r\n  }6\r\n\r\n  componentDidMount() {\r\n    this.props.fetchRobots();\r\n  }\r\n\r\n  toggleOpen = () => {\r\n      this.setState(\r\n      { open:!this.state.open }\r\n    );\r\n    }\r\n    \r\n    addRobot = () => {\r\n     const {newName:name,newEmail:email} = this.state;\r\n     if(this.state.newName === \"\" || this.state.newEmail === \"\"){\r\n       alert(\"Please enter Name and Email to add your avatar\")\r\n      this.toggleOpen();\r\n     }\r\n     else{\r\n        const newUser = {\r\n          id: uuidv4(),\r\n          name: name,\r\n          email: email,\r\n        }\r\n        this.props.addRobot(newUser);\r\n        this.toggleOpen();\r\n        this.setState({\r\n          newName: \"\",\r\n          newEmail: \"\",\r\n        });\r\n     }\r\n     \r\n    }\r\n \r\n  render() {\r\n    const { searchfield,robots } = this.props;\r\n    const filteredRobots = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    })\r\n \r\n    return this.props.isLoading ? (\r\n      <h1 style={{ textAlign: \"center\" }}>Loading</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <Modal open={this.state.open} onClose={this.toggleOpen}>\r\n          <form className=\"tc\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              placeholder=\"name\"\r\n              onChange={(event) => {\r\n                this.setState({\r\n                  newName: event.target.value\r\n                });\r\n              }}\r\n              value={this.props.newName}\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              name=\"email\"\r\n              placeholder=\"email\"\r\n              onChange={(event) => {\r\n                this.setState({\r\n                  newEmail: event.target.value\r\n                });\r\n              }}\r\n              value={this.props.newEmail}\r\n            />\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={this.addRobot}\r\n            >\r\n              Add\r\n            </Button>\r\n          </form>\r\n        </Modal>\r\n        <h1 className=\"f1\">RoboFriends</h1>\r\n        <div className=\"tc\">\r\n          <SearchBox\r\n            searchfield={this.props.searchfield}\r\n            searchChange={this.props.onSearchChange}\r\n          />\r\n          <Button\r\n            style={{\r\n              fontFamily: \"SEGA LOGO FONT\",\r\n              color: \"#0ccac4\",\r\n            }}\r\n            variant=\"outlined\"\r\n            color=\"inherit\"\r\n            onClick={this.toggleOpen}\r\n          >\r\n            ADD ROBOT\r\n          </Button>\r\n        </div>\r\n        <Scroll>\r\n          <CardList robots={filteredRobots} />\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStatesToProps,mapDispatchToProps)(App);","export const SEARCH_CHANGE = \"SEARCH_CHANGE\";\r\nexport const ADD_ROBOT = \"ADD_ROBOT\";\r\nexport const FETCH_ROBOT_PENDING = \"FETCH_ROBOT_PENDING\";\r\nexport const FETCH_ROBOT_SUCCESS = \"FETCH_ROBOT_SUCCESS\";\r\nexport const FETCH_ROBOT_ERROR = \"FETCH_ROBOT_ERROR\";\r\n\r\nexport const searchChange = (searchText) => {\r\n    return{\r\n        type:SEARCH_CHANGE,\r\n        payload:searchText,\r\n    }\r\n}\r\n\r\nexport const addRobot = (user) => {\r\n    return{\r\n        type:ADD_ROBOT,\r\n        payload:user\r\n    }\r\n}\r\n\r\nexport const fetchRobots = () => (dispatch) => {\r\n    dispatch({type:FETCH_ROBOT_PENDING})\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((response) =>response.json())\r\n    .then(data=>{dispatch({type:FETCH_ROBOT_SUCCESS,payload:data})})\r\n    .catch(err=>{dispatch({type:FETCH_ROBOT_ERROR,payload:err})})\r\n}","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","\r\nimport { SEARCH_CHANGE,ADD_ROBOT,FETCH_ROBOT_PENDING,FETCH_ROBOT_SUCCESS,FETCH_ROBOT_ERROR } from \"./actions\"\r\n\r\nconst initialState = {\r\n  searchField: \"\",\r\n  robots: [],\r\n  newName: \"\",\r\n  newEmail: \"\",\r\n  isLoading:true,\r\n};\r\n\r\nexport const rootReducer = (state=initialState, action) => {\r\n    switch (action.type) {\r\n      case SEARCH_CHANGE:\r\n        return {\r\n          ...state,\r\n          searchField: action.payload,\r\n        };\r\n      case ADD_ROBOT:\r\n        return {\r\n          ...state,\r\n          robots: [...state.robots,action.payload]\r\n        };\r\n      \r\n        \r\n      case FETCH_ROBOT_PENDING:\r\n        return {\r\n          ...state,\r\n          isLoading: true,\r\n        };\r\n      case FETCH_ROBOT_SUCCESS:\r\n        return {\r\n          ...state,\r\n          isLoading: false,\r\n          robots: action.payload,\r\n        };\r\n      case FETCH_ROBOT_ERROR:\r\n          return{\r\n           ...state,\r\n           isLoading:false     \r\n      }\r\n      default:\r\n        return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons';\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore,applyMiddleware } from \"redux\";\r\nimport { rootReducer } from \"./redux/rootReducer\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer,applyMiddleware(thunk,logger));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}