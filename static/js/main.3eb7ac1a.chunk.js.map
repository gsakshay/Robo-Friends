{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","value","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","target","toggleOpen","console","log","open","state","addRobot","newName","newEmail","newUser","uuidv4","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Modal","onClose","Button","variant","color","onClick","fontFamily","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3eb7ac1a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n        value={searchfield}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n\r\n//","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Modal from '@material-ui/core/Modal';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: '',\r\n      open:false,\r\n      newName:\"\",\r\n      newEmail:\"\",\r\n      id:10\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(users => {this.setState({ robots: users})});\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value })\r\n  }\r\n\r\n  toggleOpen = () => {\r\n      console.log(\"workingg\")\r\n      this.setState(\r\n      { open:!this.state.open }\r\n    );\r\n    }\r\n    \r\n    addRobot = () => {\r\n     const {newName:name,newEmail:email} = this.state;\r\n     console.log(this.state.robots)\r\n     const newUser = {\r\n       id: uuidv4(),\r\n       name: name,\r\n       email: email,\r\n     };\r\n     this.setState({\r\n      robots:[...this.state.robots,newUser]\r\n     })\r\n     this.toggleOpen()\r\n     this.setState({\r\n       newName: \"\",\r\n       newEmail: \"\"\r\n     });\r\n    }\r\n \r\n  render() {\r\n    const { robots, searchfield } = this.state;\r\n    const filteredRobots = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    })\r\n \r\n    return !robots.length ? (\r\n      <h1>Loading</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <Modal open={this.state.open} onClose={this.toggleOpen}>\r\n          <form className=\"tc\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              placeholder=\"name\"\r\n              onChange={(event) => {\r\n                this.setState({\r\n                  newName: event.target.value,\r\n                });\r\n              }}\r\n              value={this.state.newName}\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              name=\"email\"\r\n              placeholder=\"email\"\r\n              onChange={(event) => {\r\n                this.setState({\r\n                  newEmail: event.target.value,\r\n                });\r\n              }}\r\n              value={this.state.newEmail}\r\n            />\r\n            <Button variant=\"contained\" color=\"primary\" onClick={this.addRobot}>\r\n              Add\r\n            </Button>\r\n          </form>\r\n        </Modal>\r\n        <h1 className=\"f1\">RoboFriends</h1>\r\n        <div className=\"tc\">\r\n          <SearchBox\r\n            searchfield={this.state.searchfield}\r\n            searchChange={this.onSearchChange}\r\n          />\r\n          <Button\r\n            style={{\r\n              fontFamily: \"SEGA LOGO FONT\",\r\n              color: \"#0ccac4\",\r\n            }}\r\n            variant=\"outlined\"\r\n            color=\"inherit\"\r\n            onClick={this.toggleOpen}\r\n          >\r\n            ADD ROBOT\r\n          </Button>\r\n        </div>\r\n        <Scroll>\r\n          <CardList robots={filteredRobots} />\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}